/*
Instructor: Dr. Mai, Dr. Sidra
Group members:
 Layan Bogari 2106104
Dona Alsudais 2106089
Sarah Alarifi 2105657
Raghad Aljedani 2105691
Section: B9A
 */
package PhoneNetworkApp;

import java.util.*;
import java.io.*;
import GraphFramework.*;

public class PhoneNWDesignApp {

    public static void main(String[] args) throws FileNotFoundException {
        Scanner sc = new Scanner(System.in);
        int verticesNo = 0; //number of vertices
        int edgesNo = 0; //edges of vertices
        System.out.println("Compute the Minimum Spanning Tree and Compare Running Time");
        System.out.println("For Kruskal's Algorithm and Prim's Algorithm");
        System.out.println("");
        System.out.println("1- first requirement");
        System.out.println("2- second requirement");
        System.out.println("");

        System.out.print("Select : "); //select the requirement
        int input = sc.nextInt();
        while (input != 1 && input != 2) {
            System.out.println("wrong input");
            System.exit(0);
        }
        if (input == 1) {
            File graphFile = new File("graph.txt");
            Graph g = new Graph();
            g.readGraphFromFile(graphFile);
            MSTAlgorithm algo;
            System.out.println("");
            System.out.println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows:");
            System.out.println("");
            algo = new KruskalAlg(g);
            algo.ans(g);
            algo.displayResultingMST();

            System.out.println("");
            System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm is as follows:");
            System.out.println("");
            algo = new MHPrimAlg(g);
            algo.ans(g);
            algo.displayResultingMST();
        }

        if (input == 2) {
            System.out.println("n = vertices number and m = edges number :");
            System.out.println(" 1:  n=1,000 ,  m=10,000");
            System.out.println(" 2:  n=1,000 ,  m=15,000");
            System.out.println(" 3:  n=1,000 ,  m=25,000");
            System.out.println(" 4:  n=5,000 ,  m=15,000");
            System.out.println(" 5:  n=5,000 ,  m=25,000");
            System.out.println(" 6:  n=10,000 , m=15,000");
            System.out.println(" 7:  n=10,000 , m=25,000");
            System.out.print("enter your choice : ");
            int Choice = sc.nextInt();
            switch (Choice) {
                case 1:
                    verticesNo = 1000;
                    edgesNo = 10000;
                    break;
                case 2:
                    verticesNo = 1000;
                    edgesNo = 15000;
                    break;
                case 3:
                    verticesNo = 1000;
                    edgesNo = 25000;
                    break;
                case 4:
                    verticesNo = 5000;
                    edgesNo = 15000;
                    break;
                case 5:
                    verticesNo = 5000;
                    edgesNo = 25000;
                    break;
                case 6:
                    verticesNo = 10000;
                    edgesNo = 15000;
                    break;
                case 7:
                    verticesNo = 10000;
                    edgesNo = 25000;
                    break;
                default:
                    System.out.println("wrong input");
                    System.exit(0);
            }
        }
        Graph g = new Graph(verticesNo, edgesNo, false);
        g.makeGraph(verticesNo, edgesNo);
        MSTAlgorithm alg;
        //------------Kruskal------------
        System.out.println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows:");
        alg = new KruskalAlg(g);
        double KstartTime = System.currentTimeMillis(); //start kruskal time
        alg.ans(g);
        double KfinishTime = System.currentTimeMillis(); //finish kruskal time
        System.out.println("Running time for Kruskal Algorithm: " + (KfinishTime - KstartTime));
        //------------Prim------------
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm is as follows:");
        alg = new MHPrimAlg(g);
        double PstartTime = System.currentTimeMillis(); //start prim time
        alg.ans(g);
        double PfinishtTime = System.currentTimeMillis(); //finish prim time
        System.out.println("Running time for Prim Algorithm: " + (PfinishtTime - PstartTime));
    }
}
